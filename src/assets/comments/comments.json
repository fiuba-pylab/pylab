[
    {
        "id": "if",
        "body": {
            "title": "If",
            "grid_1": "El if nos permite realizar ejecuciones condicionales. <br><br> Un if tiene 2 partes: <ul> <li>La condición que se tiene que cumplir para que el bloque de código se ejecute.  El resultado de evaluar esta expresión puede ser True (verdadero) o False (falso). </li> <li> El bloque de código, que se ejecutará si se cumple la condición anterior (o sea si la evaluación de la expresión da True). </li> </ul><br> <br>Es muy importante tener en cuenta que la sentencia if, en Python, debe ir terminada por : y el bloque de código a ejecutar debe estar indentado. En otros lenguajes de programación, esta sintaxis puede variar.",
            "grid_2": "Un if puede tener varias condiciones que se deben combinar con las operaciones and o or. <br> <br> Es posible que no solo queramos hacer algo si una determinada condición se cumple, sino que además queramos hacer algo en caso que no se cumpla la condición. Para esto tenemos la cláusula else. El if se comporta como fue explicado antes, pero si tenemos un else, en el caso de que la condición del if no se cumpla, se ejecutará el bloque de código dentro del else. Ambos bloques de código (el del if y el del else) son excluyentes, esto quiere decir que si uno se ejecuta, el otro no lo hará.",
            "grid_3": "<h5>Operador ternario:</h5><br> El operador ternario o ternary operator es una herramienta muy potente que muchos lenguajes de programación tienen. Se trata de una cláusula if/else que se define en una sola línea y puede ser usado por ejemplo, dentro de un print(). Existen tres partes en un operador ternario, que son exactamente iguales a los que había en un if else. Tenemos la condición a evaluar, el código que se ejecuta si se cumple, y el código que se ejecuta si no se cumple. En este caso, tenemos los tres en la misma línea: [código si se cumple] if [condición] else [código si no se cumple]",
            "grid_4": ""
        }
    },
    {
        "id": "while",
        "body":{
            "title": "While",
            "grid_1": "El uso del while nos permite ejecutar una sección de código repetidas veces. El código se ejecutará mientras una condición determinada se cumpla, o sea, mientras que se evalúe como True. Cuando se deje de cumplir, se saldrá del bucle y se continuará la ejecución normal. Llamaremos iteración a una ejecución completa del bloque de código dentro del while.",
            "grid_2": "Cabe destacar que existen dos tipos de bucles, los que tienen un número de iteraciones no definidas, y los que tienen un número de iteraciones definidas. El while estaría dentro del primer tipo. <br> <br>Hay que tener cuidado al pensar las condiciones de los while, ya que un mal uso del mismo puede dar lugar a bucles infinitos y problemas. Si por ejemplo iteramos hasta que cierta variable llegue a un valor, pero nunca actualizamos el valor de esa variable, nunca saldremos del while."
        }
    },
    {
        "id": "def",
        "body":{
            "title": "Funciones",
            "grid_1": "<h5>Modularización:</h5> En programación un módulo corresponde a alguna de las partes en la que un determinado problema fue dividido, es decir que un módulo resuelve alguno de los subproblemas que conforman al problema original. Un módulo puede ser pensado como una parte de un programa. Se debe tener en cuenta que un módulo no es estrictamente un único subprograma sino que también puede ser un conjunto de varios de ellos. La modularización en definitiva es construir un programa basándose en módulos independientes. <br> <br> La pieza fundamental para la modularización en Python se denomina función. Una función nos permite modularizar un programa. <br> <br> Existen funciones nativas que vienen con Python o agrupadas en módulos según distintas especialidades, como las funciones matemáticas en math, para recibir datos del usuario, pero al igual que en otros lenguajes de programación, también podemos definir nuestras propias funciones. Para ello hacemos uso de la palabra reservada def.",
            "grid_2": "La palabra clave def introduce una definición de función. Debe ir seguida del nombre de la función y de la lista de parámetros formales entre paréntesis. Las instrucciones que forman el cuerpo de la función comienzan en la línea siguiente y deben estar indentadas. <br> <br> Una de las utilidades de las funciones es que te permiten reutilizar código, si tenemos un fragmento de código usado en muchos sitios, la mejor solución sería pasarlo a una función. Esto nos evitaría tener código repetido (simplemente llamaríamos a la función donde lo necesitemos), y en caso de necesitar modificar ese código, es mucho más fácil ya que bastaría con cambiar solamente la función.",
            "grid_3": "Una función consta de: <br> <ul> <li><b> Un nombre: </b>preferentemente el nombre debe hacer referencia a lo que devuelve o lo que hace la función, para más claridad en el código.</li> <li> <b>Lista de parámetros de entrada:</b> Un parámetro es una variable utilizada para recibir valores de entrada en una función. La lista de parámetros consiste en una lista separada por comas que contiene las declaraciones de los parámetros recibidos por la función al ser invocada. Una función puede no tener parámetros de entrada. Los parámetros que se utilizan en la definición de funciones se denominan formales porque representan cualesquiera argumentos concretos con los que puedan invocarse (valores literales, variables o expresiones). Los parámetros que se utilizan para invocar una función se denominan reales.</li> <li> <b>Acciones y declaraciones:</b> Dentro del cuerpo de una función se espera encontrar declaraciones de variables, necesarias para alcanzar el objetivo de la función. Estas variables declaradas dentro de la función se denominan variables locales, una variable es local dentro del bloque de programa, en este caso una función, en la cual es declarada. También se espera encontrar acciones y estructuras de control para que la función pueda realizar lo necesario. </li> <li> <b>Parámetros de salida:</b> son las variables o valores que devolverá la función. En Python, una función puede devolver más de un valor. </li> </ul>",
            "grid_4": "<h5>Sentencia return:</h5> El uso de la sentencia return permite realizar dos cosas: <br> <ul><li>Salir de la función y transferir la ejecución de vuelta a donde se realizó la llamada. El código que esté luego del return (dentro de la función) no se ejecutará, por eso solo llamamos al return cuando finalizamos lo que queríamos hacer en la función.</li> <li>Devolver uno o varios parámetros, fruto de la ejecución de la función. </li> </ul> Si llamamos al return sin valores de retorno, se retorna None. Lo mismo sucede si se llega al final de la función y no se encuentra un return.  </ul>"
        }
    }
]